// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tasks.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const completeTask = `-- name: CompleteTask :one
UPDATE tasks
SET
	is_active = 0,
	is_completed = 1,
	duration = $2,
	completed_at = $3,
	last_modified_at = $4
WHERE id = $1
RETURNING id, title, description, created_at, completed_at, duration, category, tags, toggled_at, is_active, is_completed, user_id, last_modified_at
`

type CompleteTaskParams struct {
	ID             uuid.UUID    `json:"id"`
	Duration       string       `json:"duration"`
	CompletedAt    sql.NullTime `json:"completed_at"`
	LastModifiedAt int32        `json:"last_modified_at"`
}

func (q *Queries) CompleteTask(ctx context.Context, arg CompleteTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, completeTask,
		arg.ID,
		arg.Duration,
		arg.CompletedAt,
		arg.LastModifiedAt,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.CompletedAt,
		&i.Duration,
		&i.Category,
		&i.Tags,
		&i.ToggledAt,
		&i.IsActive,
		&i.IsCompleted,
		&i.UserID,
		&i.LastModifiedAt,
	)
	return i, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
	id,
	title,
	description,
	created_at,
	completed_at,
	duration,
	category,
	tags,
	toggled_at,
	is_active,
	is_completed,
	user_id,
	last_modified_at
) VALUES (
	$1,
	$2,
	$3,
	$4,
	$5,
	$6,
	$7,
	$8,
	$9,
	$10,
	$11,
	$12,
	$13
) RETURNING id, title, description, created_at, completed_at, duration, category, tags, toggled_at, is_active, is_completed, user_id, last_modified_at
`

type CreateTaskParams struct {
	ID             uuid.UUID      `json:"id"`
	Title          string         `json:"title"`
	Description    string         `json:"description"`
	CreatedAt      time.Time      `json:"created_at"`
	CompletedAt    sql.NullTime   `json:"completed_at"`
	Duration       string         `json:"duration"`
	Category       string         `json:"category"`
	Tags           sql.NullString `json:"tags"`
	ToggledAt      sql.NullInt32  `json:"toggled_at"`
	IsActive       int32          `json:"is_active"`
	IsCompleted    int32          `json:"is_completed"`
	UserID         uuid.UUID      `json:"user_id"`
	LastModifiedAt int32          `json:"last_modified_at"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.CreatedAt,
		arg.CompletedAt,
		arg.Duration,
		arg.Category,
		arg.Tags,
		arg.ToggledAt,
		arg.IsActive,
		arg.IsCompleted,
		arg.UserID,
		arg.LastModifiedAt,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.CompletedAt,
		&i.Duration,
		&i.Category,
		&i.Tags,
		&i.ToggledAt,
		&i.IsActive,
		&i.IsCompleted,
		&i.UserID,
		&i.LastModifiedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const editTask = `-- name: EditTask :one
UPDATE tasks
SET
	title = $2,
	description = $3,
	category = $4,
	tags = $5,
	last_modified_at = $6
WHERE id = $1
RETURNING id, title, description, created_at, completed_at, duration, category, tags, toggled_at, is_active, is_completed, user_id, last_modified_at
`

type EditTaskParams struct {
	ID             uuid.UUID      `json:"id"`
	Title          string         `json:"title"`
	Description    string         `json:"description"`
	Category       string         `json:"category"`
	Tags           sql.NullString `json:"tags"`
	LastModifiedAt int32          `json:"last_modified_at"`
}

func (q *Queries) EditTask(ctx context.Context, arg EditTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, editTask,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Category,
		arg.Tags,
		arg.LastModifiedAt,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.CompletedAt,
		&i.Duration,
		&i.Category,
		&i.Tags,
		&i.ToggledAt,
		&i.IsActive,
		&i.IsCompleted,
		&i.UserID,
		&i.LastModifiedAt,
	)
	return i, err
}

const getActiveTaskByUUID = `-- name: GetActiveTaskByUUID :many
SELECT id, title, description, created_at, completed_at, duration, category, tags, toggled_at, is_active, is_completed, user_id, last_modified_at 
FROM tasks
WHERE user_id = $1 AND is_completed = 0
`

func (q *Queries) GetActiveTaskByUUID(ctx context.Context, userID uuid.UUID) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getActiveTaskByUUID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.CompletedAt,
			&i.Duration,
			&i.Category,
			&i.Tags,
			&i.ToggledAt,
			&i.IsActive,
			&i.IsCompleted,
			&i.UserID,
			&i.LastModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompletedTasksByUUID = `-- name: GetCompletedTasksByUUID :many
SELECT id, title, description, created_at, completed_at, duration, category, tags, toggled_at, is_active, is_completed, user_id, last_modified_at 
FROM tasks
WHERE user_id = $1
	AND is_completed = 1
	AND completed_at >= $2
	AND completed_at <= $3
	AND (
		cardinality($4::text[]) = 0 OR
		EXISTS (
			SELECT 1 
			FROM unnest(tags) AS t
			WHERE t ILIKE ANY ($4)
		)
	)
	AND (
		$5 IS NULL OR title ILIKE $5
	)
	AND (
		$6 IS NULL OR category = $6
	)
`

type GetCompletedTasksByUUIDParams struct {
	UserID        uuid.UUID    `json:"user_id"`
	CompletedAt   sql.NullTime `json:"completed_at"`
	CompletedAt_2 sql.NullTime `json:"completed_at_2"`
	Column4       []string     `json:"column_4"`
	Column5       interface{}  `json:"column_5"`
	Column6       interface{}  `json:"column_6"`
}

func (q *Queries) GetCompletedTasksByUUID(ctx context.Context, arg GetCompletedTasksByUUIDParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getCompletedTasksByUUID,
		arg.UserID,
		arg.CompletedAt,
		arg.CompletedAt_2,
		pq.Array(arg.Column4),
		arg.Column5,
		arg.Column6,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.CompletedAt,
			&i.Duration,
			&i.Category,
			&i.Tags,
			&i.ToggledAt,
			&i.IsActive,
			&i.IsCompleted,
			&i.UserID,
			&i.LastModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNonCompletedTasks = `-- name: GetNonCompletedTasks :many
SELECT id, title, description, created_at, completed_at, duration, category, tags, toggled_at, is_active, is_completed, user_id, last_modified_at
FROM TASKS
WHERE is_completed = 0
ORDER BY user_id
`

func (q *Queries) GetNonCompletedTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getNonCompletedTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.CompletedAt,
			&i.Duration,
			&i.Category,
			&i.Tags,
			&i.ToggledAt,
			&i.IsActive,
			&i.IsCompleted,
			&i.UserID,
			&i.LastModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasks = `-- name: GetTasks :many
SELECT id, title, description, created_at, completed_at, duration, category, tags, toggled_at, is_active, is_completed, user_id, last_modified_at FROM TASKS
`

func (q *Queries) GetTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.CompletedAt,
			&i.Duration,
			&i.Category,
			&i.Tags,
			&i.ToggledAt,
			&i.IsActive,
			&i.IsCompleted,
			&i.UserID,
			&i.LastModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toggleTask = `-- name: ToggleTask :one
UPDATE tasks
SET 
	is_active = $2,
	toggled_at = $3,
	duration = $4,
	last_modified_at = $5
WHERE 
	id = $1
RETURNING id, title, description, created_at, completed_at, duration, category, tags, toggled_at, is_active, is_completed, user_id, last_modified_at
`

type ToggleTaskParams struct {
	ID             uuid.UUID     `json:"id"`
	IsActive       int32         `json:"is_active"`
	ToggledAt      sql.NullInt32 `json:"toggled_at"`
	Duration       string        `json:"duration"`
	LastModifiedAt int32         `json:"last_modified_at"`
}

func (q *Queries) ToggleTask(ctx context.Context, arg ToggleTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, toggleTask,
		arg.ID,
		arg.IsActive,
		arg.ToggledAt,
		arg.Duration,
		arg.LastModifiedAt,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.CompletedAt,
		&i.Duration,
		&i.Category,
		&i.Tags,
		&i.ToggledAt,
		&i.IsActive,
		&i.IsCompleted,
		&i.UserID,
		&i.LastModifiedAt,
	)
	return i, err
}
