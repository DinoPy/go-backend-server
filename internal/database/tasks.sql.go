// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tasks.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const completeTask = `-- name: CompleteTask :one
UPDATE tasks
SET
	is_active = FALSE,
	is_completed = TRUE,
	duration = $2,
	completed_at = $3,
	last_modified_at = $4
WHERE id = $1
RETURNING id, title, description, created_at, completed_at, duration, category, tags, toggled_at, is_active, is_completed, user_id, last_modified_at, priority, due_at, show_before_due_time
`

type CompleteTaskParams struct {
	ID             uuid.UUID    `json:"id"`
	Duration       string       `json:"duration"`
	CompletedAt    sql.NullTime `json:"completed_at"`
	LastModifiedAt int64        `json:"last_modified_at"`
}

func (q *Queries) CompleteTask(ctx context.Context, arg CompleteTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, completeTask,
		arg.ID,
		arg.Duration,
		arg.CompletedAt,
		arg.LastModifiedAt,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.CompletedAt,
		&i.Duration,
		&i.Category,
		pq.Array(&i.Tags),
		&i.ToggledAt,
		&i.IsActive,
		&i.IsCompleted,
		&i.UserID,
		&i.LastModifiedAt,
		&i.Priority,
		&i.DueAt,
		&i.ShowBeforeDueTime,
	)
	return i, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
	id,
	title,
	description,
	created_at,
	completed_at,
	duration,
	category,
	tags,
	toggled_at,
	is_active,
	is_completed,
	user_id,
	last_modified_at,
	priority,
	due_at,
	show_before_due_time
) VALUES (
	$1,
	$2,
	$3,
	$4,
	$5,
	$6,
	$7,
	$8,
	$9,
	$10,
	$11,
	$12,
	$13,
	$14,
	$15,
	$16
) RETURNING id, title, description, created_at, completed_at, duration, category, tags, toggled_at, is_active, is_completed, user_id, last_modified_at, priority, due_at, show_before_due_time
`

type CreateTaskParams struct {
	ID                uuid.UUID     `json:"id"`
	Title             string        `json:"title"`
	Description       string        `json:"description"`
	CreatedAt         time.Time     `json:"created_at"`
	CompletedAt       sql.NullTime  `json:"completed_at"`
	Duration          string        `json:"duration"`
	Category          string        `json:"category"`
	Tags              []string      `json:"tags"`
	ToggledAt         sql.NullInt64 `json:"toggled_at"`
	IsActive          bool          `json:"is_active"`
	IsCompleted       bool          `json:"is_completed"`
	UserID            uuid.UUID     `json:"user_id"`
	LastModifiedAt    int64         `json:"last_modified_at"`
	Priority          sql.NullInt32 `json:"priority"`
	DueAt             sql.NullTime  `json:"due_at"`
	ShowBeforeDueTime sql.NullInt32 `json:"show_before_due_time"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.CreatedAt,
		arg.CompletedAt,
		arg.Duration,
		arg.Category,
		pq.Array(arg.Tags),
		arg.ToggledAt,
		arg.IsActive,
		arg.IsCompleted,
		arg.UserID,
		arg.LastModifiedAt,
		arg.Priority,
		arg.DueAt,
		arg.ShowBeforeDueTime,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.CompletedAt,
		&i.Duration,
		&i.Category,
		pq.Array(&i.Tags),
		&i.ToggledAt,
		&i.IsActive,
		&i.IsCompleted,
		&i.UserID,
		&i.LastModifiedAt,
		&i.Priority,
		&i.DueAt,
		&i.ShowBeforeDueTime,
	)
	return i, err
}

const debugTasksWithDueDates = `-- name: DebugTasksWithDueDates :many
SELECT 
  id,
  title,
  due_at,
  show_before_due_time,
  is_completed,
  NOW() as current_time_utc,
  NOW() AT TIME ZONE 'Europe/Bucharest' as current_time_bucharest,
  EXTRACT(EPOCH FROM (due_at - NOW())) as seconds_until_due_utc,
  EXTRACT(EPOCH FROM (due_at - (NOW() AT TIME ZONE 'Europe/Bucharest'))) as seconds_until_due_bucharest
FROM tasks
WHERE user_id = $1 
  AND is_completed = FALSE
  AND due_at IS NOT NULL
ORDER BY due_at ASC
`

type DebugTasksWithDueDatesRow struct {
	ID                       uuid.UUID     `json:"id"`
	Title                    string        `json:"title"`
	DueAt                    sql.NullTime  `json:"due_at"`
	ShowBeforeDueTime        sql.NullInt32 `json:"show_before_due_time"`
	IsCompleted              bool          `json:"is_completed"`
	CurrentTimeUtc           interface{}   `json:"current_time_utc"`
	CurrentTimeBucharest     interface{}   `json:"current_time_bucharest"`
	SecondsUntilDueUtc       string        `json:"seconds_until_due_utc"`
	SecondsUntilDueBucharest string        `json:"seconds_until_due_bucharest"`
}

func (q *Queries) DebugTasksWithDueDates(ctx context.Context, userID uuid.UUID) ([]DebugTasksWithDueDatesRow, error) {
	rows, err := q.db.QueryContext(ctx, debugTasksWithDueDates, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DebugTasksWithDueDatesRow
	for rows.Next() {
		var i DebugTasksWithDueDatesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.DueAt,
			&i.ShowBeforeDueTime,
			&i.IsCompleted,
			&i.CurrentTimeUtc,
			&i.CurrentTimeBucharest,
			&i.SecondsUntilDueUtc,
			&i.SecondsUntilDueBucharest,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const editTask = `-- name: EditTask :one
UPDATE tasks
SET
	title = $2,
	description = $3,
	category = $4,
	tags = $5,
	last_modified_at = $6,
	priority = $7,
	due_at = $8,
	show_before_due_time = $9
WHERE id = $1
RETURNING id, title, description, created_at, completed_at, duration, category, tags, toggled_at, is_active, is_completed, user_id, last_modified_at, priority, due_at, show_before_due_time
`

type EditTaskParams struct {
	ID                uuid.UUID     `json:"id"`
	Title             string        `json:"title"`
	Description       string        `json:"description"`
	Category          string        `json:"category"`
	Tags              []string      `json:"tags"`
	LastModifiedAt    int64         `json:"last_modified_at"`
	Priority          sql.NullInt32 `json:"priority"`
	DueAt             sql.NullTime  `json:"due_at"`
	ShowBeforeDueTime sql.NullInt32 `json:"show_before_due_time"`
}

func (q *Queries) EditTask(ctx context.Context, arg EditTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, editTask,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Category,
		pq.Array(arg.Tags),
		arg.LastModifiedAt,
		arg.Priority,
		arg.DueAt,
		arg.ShowBeforeDueTime,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.CompletedAt,
		&i.Duration,
		&i.Category,
		pq.Array(&i.Tags),
		&i.ToggledAt,
		&i.IsActive,
		&i.IsCompleted,
		&i.UserID,
		&i.LastModifiedAt,
		&i.Priority,
		&i.DueAt,
		&i.ShowBeforeDueTime,
	)
	return i, err
}

const getActiveTaskByUUID = `-- name: GetActiveTaskByUUID :many
SELECT id, title, description, created_at, completed_at, duration, category, tags, toggled_at, is_active, is_completed, user_id, last_modified_at, priority, due_at, show_before_due_time 
FROM tasks
WHERE user_id = $1 AND is_completed = FALSE
ORDER BY created_at ASC
`

func (q *Queries) GetActiveTaskByUUID(ctx context.Context, userID uuid.UUID) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getActiveTaskByUUID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.CompletedAt,
			&i.Duration,
			&i.Category,
			pq.Array(&i.Tags),
			&i.ToggledAt,
			&i.IsActive,
			&i.IsCompleted,
			&i.UserID,
			&i.LastModifiedAt,
			&i.Priority,
			&i.DueAt,
			&i.ShowBeforeDueTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompletedTasksByUUID = `-- name: GetCompletedTasksByUUID :many
SELECT id, title, description, created_at, completed_at, duration, category, tags, toggled_at, is_active, is_completed, user_id, last_modified_at, priority, due_at, show_before_due_time 
FROM tasks
WHERE user_id = $1
	AND is_completed = TRUE
	AND (
	  $2::timestamp IS NULL OR completed_at >= $2::timestamp
	)
	AND (
	  $3::timestamp IS NULL OR completed_at <= $3::timestamp
	)
	AND (
		cardinality($4::text[]) = 0
		OR EXISTS (
			SELECT 1
			FROM unnest($4::text[]) AS tag_filter
			WHERE tag_filter ILIKE ANY (tags)
		)
	)
	  AND (
		$5::text IS NULL OR title ILIKE $5::text
	  )
	  AND (
		$6::text IS NULL OR category = $6::text
	  )
ORDER BY created_at ASC
`

type GetCompletedTasksByUUIDParams struct {
	UserID      uuid.UUID      `json:"user_id"`
	StartDate   sql.NullTime   `json:"start_date"`
	EndDate     sql.NullTime   `json:"end_date"`
	Tags        []string       `json:"tags"`
	SearchQuery sql.NullString `json:"search_query"`
	Category    sql.NullString `json:"category"`
}

func (q *Queries) GetCompletedTasksByUUID(ctx context.Context, arg GetCompletedTasksByUUIDParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getCompletedTasksByUUID,
		arg.UserID,
		arg.StartDate,
		arg.EndDate,
		pq.Array(arg.Tags),
		arg.SearchQuery,
		arg.Category,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.CompletedAt,
			&i.Duration,
			&i.Category,
			pq.Array(&i.Tags),
			&i.ToggledAt,
			&i.IsActive,
			&i.IsCompleted,
			&i.UserID,
			&i.LastModifiedAt,
			&i.Priority,
			&i.DueAt,
			&i.ShowBeforeDueTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNonCompletedTasks = `-- name: GetNonCompletedTasks :many
SELECT id, title, description, created_at, completed_at, duration, category, tags, toggled_at, is_active, is_completed, user_id, last_modified_at, priority, due_at, show_before_due_time
FROM tasks
WHERE is_completed = FALSE
ORDER BY user_id
`

func (q *Queries) GetNonCompletedTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getNonCompletedTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.CompletedAt,
			&i.Duration,
			&i.Category,
			pq.Array(&i.Tags),
			&i.ToggledAt,
			&i.IsActive,
			&i.IsCompleted,
			&i.UserID,
			&i.LastModifiedAt,
			&i.Priority,
			&i.DueAt,
			&i.ShowBeforeDueTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, title, description, created_at, completed_at, duration, category, tags, toggled_at, is_active, is_completed, user_id, last_modified_at, priority, due_at, show_before_due_time FROM tasks WHERE id = $1
`

func (q *Queries) GetTaskByID(ctx context.Context, id uuid.UUID) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.CompletedAt,
		&i.Duration,
		&i.Category,
		pq.Array(&i.Tags),
		&i.ToggledAt,
		&i.IsActive,
		&i.IsCompleted,
		&i.UserID,
		&i.LastModifiedAt,
		&i.Priority,
		&i.DueAt,
		&i.ShowBeforeDueTime,
	)
	return i, err
}

const getTasks = `-- name: GetTasks :many
SELECT id, title, description, created_at, completed_at, duration, category, tags, toggled_at, is_active, is_completed, user_id, last_modified_at, priority, due_at, show_before_due_time FROM tasks ORDER BY created_at ASC
`

func (q *Queries) GetTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.CompletedAt,
			&i.Duration,
			&i.Category,
			pq.Array(&i.Tags),
			&i.ToggledAt,
			&i.IsActive,
			&i.IsCompleted,
			&i.UserID,
			&i.LastModifiedAt,
			&i.Priority,
			&i.DueAt,
			&i.ShowBeforeDueTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksDueForNotifications = `-- name: GetTasksDueForNotifications :many
SELECT id, title, description, created_at, completed_at, duration, category, tags, toggled_at, is_active, is_completed, user_id, last_modified_at, priority, due_at, show_before_due_time 
FROM tasks
WHERE user_id = $1 
  AND is_completed = FALSE
  AND due_at IS NOT NULL
  AND (
    -- 30 minutes before due (urgent)
    (due_at - NOW() <= INTERVAL '30 minutes' AND due_at - NOW() > INTERVAL '0 minutes')
    OR
    -- 1 hour before due (high)
    (due_at - NOW() <= INTERVAL '1 hour' AND due_at - NOW() > INTERVAL '30 minutes')
    OR
    -- 2 hours before due (high)
    (due_at - NOW() <= INTERVAL '2 hours' AND due_at - NOW() > INTERVAL '1 hour')
    OR
    -- 3 hours before due (normal)
    (due_at - NOW() <= INTERVAL '3 hours' AND due_at - NOW() > INTERVAL '2 hours')
    OR
    -- 6 hours before due (normal)
    (due_at - NOW() <= INTERVAL '6 hours' AND due_at - NOW() > INTERVAL '3 hours')
    OR
    -- 12 hours before due (normal)
    (due_at - NOW() <= INTERVAL '12 hours' AND due_at - NOW() > INTERVAL '6 hours')
    OR
    -- 24 hours before due (low)
    (due_at - NOW() <= INTERVAL '24 hours' AND due_at - NOW() > INTERVAL '12 hours')
  )
ORDER BY due_at ASC
`

func (q *Queries) GetTasksDueForNotifications(ctx context.Context, userID uuid.UUID) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksDueForNotifications, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.CompletedAt,
			&i.Duration,
			&i.Category,
			pq.Array(&i.Tags),
			&i.ToggledAt,
			&i.IsActive,
			&i.IsCompleted,
			&i.UserID,
			&i.LastModifiedAt,
			&i.Priority,
			&i.DueAt,
			&i.ShowBeforeDueTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksDueForVisibility = `-- name: GetTasksDueForVisibility :many
SELECT id, title, description, created_at, completed_at, duration, category, tags, toggled_at, is_active, is_completed, user_id, last_modified_at, priority, due_at, show_before_due_time 
FROM tasks
WHERE user_id = $1 
  AND is_completed = FALSE
  AND due_at IS NOT NULL
  AND show_before_due_time IS NOT NULL
  AND due_at - INTERVAL '1 minute' * show_before_due_time <= NOW()
  AND due_at - INTERVAL '1 minute' * show_before_due_time > NOW() - INTERVAL '1 minute'
ORDER BY due_at ASC
`

func (q *Queries) GetTasksDueForVisibility(ctx context.Context, userID uuid.UUID) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksDueForVisibility, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.CompletedAt,
			&i.Duration,
			&i.Category,
			pq.Array(&i.Tags),
			&i.ToggledAt,
			&i.IsActive,
			&i.IsCompleted,
			&i.UserID,
			&i.LastModifiedAt,
			&i.Priority,
			&i.DueAt,
			&i.ShowBeforeDueTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toggleTask = `-- name: ToggleTask :one
UPDATE tasks
SET 
	is_active = $2,
	toggled_at = $3,
	duration = $4,
	last_modified_at = $5
WHERE 
	id = $1
RETURNING id, title, description, created_at, completed_at, duration, category, tags, toggled_at, is_active, is_completed, user_id, last_modified_at, priority, due_at, show_before_due_time
`

type ToggleTaskParams struct {
	ID             uuid.UUID     `json:"id"`
	IsActive       bool          `json:"is_active"`
	ToggledAt      sql.NullInt64 `json:"toggled_at"`
	Duration       string        `json:"duration"`
	LastModifiedAt int64         `json:"last_modified_at"`
}

func (q *Queries) ToggleTask(ctx context.Context, arg ToggleTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, toggleTask,
		arg.ID,
		arg.IsActive,
		arg.ToggledAt,
		arg.Duration,
		arg.LastModifiedAt,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.CompletedAt,
		&i.Duration,
		&i.Category,
		pq.Array(&i.Tags),
		&i.ToggledAt,
		&i.IsActive,
		&i.IsCompleted,
		&i.UserID,
		&i.LastModifiedAt,
		&i.Priority,
		&i.DueAt,
		&i.ShowBeforeDueTime,
	)
	return i, err
}
