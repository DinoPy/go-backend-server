// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
	id,
	first_name,
	last_name,
	email
) VALUES (
	$1,
	$2,
	$3,
	$4
)
ON CONFLICT (email)
DO UPDATE SET id = users.id
RETURNING id, first_name, last_name, email, created_at, updated_at, categories, key_commands
`

type CreateUserParams struct {
	ID        uuid.UUID `json:"id"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Email     string    `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Categories,
		&i.KeyCommands,
	)
	return i, err
}

const getUserSettings = `-- name: GetUserSettings :one
SELECT categories, key_commands
FROM users
WHERE id = $1
`

type GetUserSettingsRow struct {
	Categories  sql.NullString `json:"categories"`
	KeyCommands sql.NullString `json:"key_commands"`
}

func (q *Queries) GetUserSettings(ctx context.Context, id uuid.UUID) (GetUserSettingsRow, error) {
	row := q.db.QueryRowContext(ctx, getUserSettings, id)
	var i GetUserSettingsRow
	err := row.Scan(&i.Categories, &i.KeyCommands)
	return i, err
}

const updateUserCategories = `-- name: UpdateUserCategories :one
UPDATE users
SET
	categories = $2
WHERE
	id = $1
RETURNING id, first_name, last_name, email, created_at, updated_at, categories, key_commands
`

type UpdateUserCategoriesParams struct {
	ID         uuid.UUID      `json:"id"`
	Categories sql.NullString `json:"categories"`
}

func (q *Queries) UpdateUserCategories(ctx context.Context, arg UpdateUserCategoriesParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserCategories, arg.ID, arg.Categories)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Categories,
		&i.KeyCommands,
	)
	return i, err
}

const updateUserCommands = `-- name: UpdateUserCommands :one
UPDATE users
SET
	key_commands = $2
WHERE
	id = $1
RETURNING id, first_name, last_name, email, created_at, updated_at, categories, key_commands
`

type UpdateUserCommandsParams struct {
	ID          uuid.UUID      `json:"id"`
	KeyCommands sql.NullString `json:"key_commands"`
}

func (q *Queries) UpdateUserCommands(ctx context.Context, arg UpdateUserCommandsParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserCommands, arg.ID, arg.KeyCommands)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Categories,
		&i.KeyCommands,
	)
	return i, err
}
