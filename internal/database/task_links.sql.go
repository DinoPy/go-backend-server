// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: task_links.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getOccurrenceForTask = `-- name: GetOccurrenceForTask :one
SELECT occurrence_id FROM task_links WHERE task_id = $1
`

func (q *Queries) GetOccurrenceForTask(ctx context.Context, taskID uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getOccurrenceForTask, taskID)
	var occurrence_id uuid.UUID
	err := row.Scan(&occurrence_id)
	return occurrence_id, err
}

const getTaskIDForOccurrence = `-- name: GetTaskIDForOccurrence :one
SELECT task_id FROM task_links WHERE occurrence_id = $1
`

func (q *Queries) GetTaskIDForOccurrence(ctx context.Context, occurrenceID uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getTaskIDForOccurrence, occurrenceID)
	var task_id uuid.UUID
	err := row.Scan(&task_id)
	return task_id, err
}

const linkTaskToOccurrence = `-- name: LinkTaskToOccurrence :exec
INSERT INTO task_links (occurrence_id, task_id)
VALUES ($1, $2)
ON CONFLICT (occurrence_id) DO NOTHING
`

type LinkTaskToOccurrenceParams struct {
	OccurrenceID uuid.UUID `json:"occurrence_id"`
	TaskID       uuid.UUID `json:"task_id"`
}

func (q *Queries) LinkTaskToOccurrence(ctx context.Context, arg LinkTaskToOccurrenceParams) error {
	_, err := q.db.ExecContext(ctx, linkTaskToOccurrence, arg.OccurrenceID, arg.TaskID)
	return err
}

const unlinkTaskFromOccurrence = `-- name: UnlinkTaskFromOccurrence :exec
DELETE FROM task_links WHERE occurrence_id = $1
`

func (q *Queries) UnlinkTaskFromOccurrence(ctx context.Context, occurrenceID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, unlinkTaskFromOccurrence, occurrenceID)
	return err
}
